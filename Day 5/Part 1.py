import unittest

class TestTEST(unittest.TestCase):
    def test(self):
        instructions = [1002, 4, 3, 4, 33]
        self.assertEqual(calc(instructions), [1002, 4, 3, 4, 99])

    def test2(self):
        instructions = [1101, 100, -1, 4, 0]
        self.assertEqual(calc(instructions), [1101, 100, -1, 4, 99])

def add_to_length(a):
    while len(a) < 5:
        a = '0' + a
    return a

def calc(n):
    position = 0

    def get_parameter(parameter, mode):
        if mode == '0':
            return int(n[parameter])
        elif mode == '1':
            return int(parameter)

    def add(p1, p2):
        n[n[position+3]] = p1 + p2

    def multiply(p1, p2):
        n[n[position+3]] = p1 * p2

    
    while True:
        step = 4
        k = str(n[position])
        if k == '1':
            # n[n[position+3]] = n[n[position+1]] + n[n[position+2]]
            add(n[n[position+1]], n[n[position+2]])
        elif k == '2':
            # n[n[position+3]] = n[n[position+1]] * n[n[position+2]]
            multiply(n[n[position+1]], n[n[position+2]])
        elif k == '3':
            n[n[position+1]] = int(input())
            step = 2
        elif k == '4':
            print(n[n[position+1]])
            step = 2
        elif k == '99':
            break
        else:
            opcode = k[-2:]
            modes1 = add_to_length(k)
            modes = modes1[:3] 

            if int(opcode) == 1:
                p1 = get_parameter(n[position+1], modes[2])
                p2 = get_parameter(n[position+2], modes[1])
                # n[n[position+3]] = p1 + p2
                add(p1, p2)
            elif int(opcode) == 2:
                p1 = get_parameter(n[position+1], modes[2])
                p2 = get_parameter(n[position+2], modes[1])
                # n[n[position+3]] = p1 * p2
                multiply(p1, p2)
            elif int(opcode) == 3:
                p1 = get_parameter(n[position+1], modes[2])
                n[p1] = int(input())
            elif int(opcode) == 4:
                p1 = get_parameter(n[position+1], modes[2])
                print(p1)

        position += step

    return(n)


if __name__ == "__main__":
    # unittest.main()
    calc([3,225,1,225,6,6,1100,1,238,225,104,0,1102,83,20,225,1102,55,83,224,1001,224,-4565,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,52,15,225,1102,42,92,225,1101,24,65,225,101,33,44,224,101,-125,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1001,39,75,224,101,-127,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,2,14,48,224,101,-1300,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1002,139,79,224,101,-1896,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,24,92,225,1101,20,53,224,101,-73,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1101,70,33,225,1101,56,33,225,1,196,170,224,1001,224,-38,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1101,50,5,225,102,91,166,224,1001,224,-3003,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,344,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,389,101,1,223,223,108,677,226,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,434,101,1,223,223,1008,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,677,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,494,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,509,101,1,223,223,8,677,677,224,102,2,223,223,1006,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,677,226,224,102,2,223,223,1006,224,554,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,599,1001,223,1,223,7,677,677,224,1002,223,2,223,1005,224,614,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,644,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,659,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226])
